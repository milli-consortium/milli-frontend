schema {
  query: query
  mutation: mutation
}

"Annotations object"
type Annotation {
  "GraphID for annotation node"
  graphId: String @fake(type: uuid)
  context: String! @fake(type: password)

  "id"
  id: String! @fake(type: uuid)

  "object type"
  type: String! @fake(type: mimeType)

  "Annotation motivation"
  motivation: String! @fake(type: companyCatchPhrase)

  "The agent responsible for creation of annotation"
  creator: Creator!

  "The date-time of creation of annotation"
  created: String! @fake(type: pastDate)

  "The agent responsible for generation of annotation"
  generator: Generator!

  "Date-time of generation of annotation"
  generated: String! @fake(type: recentDate)

  "Annotation body"
  body: [bodyType!]

  "Annotation target"
  target: [targetType!]!
}

input AnnotationInput {
  targetId: String!
  motivation: String!
  body: BodyInput!
  target: Target!
  concept: String
}

type AuthPayload {
  token: String!
  user: User!
}

input BodyInput {
  typ: String!
  motivation: String!
  value: String!
  format: String!
  language: String!
  creator: String!
}

input Comment {
  targetId: String!
  value: String!
}

type Creator {
  graphId: String! @fake(type: uuid)
  label: String!
  typ: String! @fake(type: jobTitle)
  name: String! @fake(type: fullName)
  nickname: String! @fake(type: firstName)
}

input CsvIngestInput {
  filePath: String!
  crosswalk: [FlatRecordMapper!]!
  partner: PartnerInput!
}

"Date range, inclusive"
type DateRange {
  "Date starting from"
  from: String!

  "Date ending"
  to: String!
}

"ISO-8601 formatted string of format: 2017-06-25"
input DateRangeInput {
  from: String!
  to: String!
}

type EntityFilter {
  blob: String!
  lang: [Language!]
  dateRange: DateRange
  subjects: [Subject!]
  people: [Person!]
  places: [Place!]
  partners: [Partner!]
}

input EntityFilterInput {
  blob: String!
  dateRange: DateRangeInput
  lang: [String!]
  subjects: [String!]
  people: [String!]
  places: [String!]
  partners: [String!]
}

"""
Map from a flat-record to any level of 
      nested record structure. Ensure column names are unique.
"""
input FlatRecordMapper {
  field: ValidField!
  columnName: String!
  default: String!
}

type Generator {
  graphId: String!
  label: String!
  typ: String!
  name: String!
  homepage: String!
}

type Image {
  src: String! @fake(type: imageUrl)
  alt: String @fake(type: hackerPhrase)
  size: ImageSize!
}

enum ImageSize {
  LARGE
  MEDIUM
  SMALL
}

type Language {
  graphId: String!
  langId: String!
  displayName: String!
  isSelected: Boolean!
}

type NiosxEntity {
  graphId: String! @fake(type: uuid)
  agencyCode: String! @fake(type: countryCode)
  recordId: String! @fake(type: uuid)
  unitId: String! @fake(type: uuid)
  title: String! @fake(type: words, options: {minNumber: 2, maxNumber: 15})
  creator: String!
  dateOfCreation: String! @fake(type: pastDate)
  extent: String!
  level: String!
  partner: Partner!
  subjects: [Subject!]!
  images: [Image!] @listLength(min: 0, max: 5)
  description: Annotation
  annotations: [Annotation!]!
}

input NiosxEntityInput {
  agencyCode: String!
  recordId: String!
  unitId: String!
  title: String!
  creator: String!
  dateOfCreation: String!
  extent: String!
  level: String!
  partner: String!
}

input NiosxUser {
  username: String!
  password: String!
  role: String!
}

type Page {
  edges: [PageEdge!]!
  pageInfo: PageInfo!
}

type PageEdge {
  node: NiosxEntity!
  cursor: String!
  offset: Int!
  isDirectMatch: Boolean!
  annotationMatchCount: Int!
}

type PageInfo {
  pageNumber: Int!
  endCursor: String!
  hasNextPage: Boolean!
  filters: EntityFilter!
}

type Partner {
  graphId: String!
  displayName: String!
  isSelected: Boolean!
}

input PartnerInput {
  graphId: String!
  displayName: String!
  isSelected: Boolean = true
}

type Person {
  graphId: String!
  displayName: String!
  isSelected: Boolean!
}

type Place {
  graphId: String!
  lat: Float!
  lon: Float!
  displayName: String!
  isSelected: Boolean!
}

type SpecificResourceType {
  graphId: String!
  typ: String!
  source: String!
  targetId: String
}

type Subject {
  label: String! @fake(type: locale)
  graphId: String! @fake(type: uuid)
  prefLabel: String!
  inScheme: String!
  id: String! @fake(type: uuid)
  isSelected: Boolean!
}

input Target {
  source: String!
  targetId: String
}

type TextualBody {
  graphId: String! @fake(type: uuid)
  typ: String!
  purpose: String! @fake(type: companyCatchPhrase)
  value: String! @fake(type: lorem, options: {loremSize: paragraphs})
  format: String!
  language: String!
  creator: String! @fake(type: fullName)
}

type User {
  username: String!
  permissions: [String!]
}

enum ValidField {
  ME_subject
  ME_level
  ME_extent
  ME_dateOfCreation
  ME_creator
  ME_title
  ME_unitId
  ME_agencyCode
  ME_recordId
}

"Can be one of TextualBodyType, etc."
union bodyType = TextualBody

type mutation {
  addSubjectRDF(xml: String!, schema: String!): Subject
  rdfIngest(rdf_file: String!, schema: String!): Int!
  ingestWithCrosswalk(csvIngestInput: CsvIngestInput!): Int!
  addEntity(niosxEntityInput: NiosxEntityInput!): NiosxEntity
  addAnnotation(annotation: AnnotationInput!): Annotation
  addComment(comment: Comment!): Annotation
  login(username: String!, password: String!): AuthPayload
  register(niosxUserInput: NiosxUser!): String!
}

type query {
  "Paginated list of entities"
  searchCollections(next: Int!, cursor: String!, entityFilterInputArg: EntityFilterInput!): Page

  "Returns everything! Be careful!"
  crudeSearch(blob: String!): [NiosxEntity!]!

  "Test if there is an object with this graphId"
  isValidGraphId(id: String!): Boolean!

  "Look up an entity with its graphId"
  findEntity(id: String!): NiosxEntity

  "Look up a user with its username"
  findUser(username: String!): User
}

"Can be one of SpecificResource, etc."
union targetType = SpecificResourceType
